/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Helpfy API Documentation
 * Official documentation of the service Helpfy. Available values for the gptServiceName parameter: "yandexgpt", "gigachat"
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type { AxiosRequestConfig, AxiosResponse } from 'axios'

import type {
  BotAgentControllerFindAllParams,
  BotAgentEntity,
  BotAgentsResponseDto,
  BotControllerFindAllParams,
  BotEntity,
  BotsResponseDto,
  ClientControllerFindAllParams,
  ClientEntity,
  ClientsResponseDto,
  CompletionLogControllerFindAllForJournalParams,
  CompletionLogControllerGetLastMessagesParams,
  CompletionLogsResponseDto,
  CompletionTokenUsageResponseDto,
  CreateBotAgentDto,
  CreateBotCompletionDto,
  CreateBotDto,
  CreateBotKnowledgeDto,
  CreateBotKnowledgeResponseDto,
  CreateClientDto,
  CreateFirstLineDto,
  CreateGigaChatIntegrationDto,
  CreateGptIntegrationProfile,
  CreateKnowledgeGroupDto,
  CreateUserDto,
  CreateYandexGPTIntegrationDto,
  EmbeddingLogsResponseDto,
  EmbeddingTokenUsagesResponseDto,
  FirstLineControllerFindAllParams,
  FirstLineEntity,
  FirstLinesResponseDto,
  GPTModelVersionsDto,
  GigaChatProfileEntity,
  GptIntegrationProfileControllerTestIntegration200,
  GptIntegrationProfileEntity,
  KnowledgeControllerFindAllParams,
  KnowledgeEntity,
  KnowledgeGroupEntity,
  KnowledgeGroupEntityWithDocumentsCount,
  KnowledgeGroupResponseDto,
  KnowledgesResponseDto,
  LLMVersionDtoClass,
  LastMessagesResponse,
  LoginDto,
  MasterLoginDto,
  ResetApiKeyResponseDto,
  ResponseBotCompletionDto,
  ResponseCompletionStatusAsyncDto,
  TotalCompletionTokenUsageDto,
  TotalEmbeddingTokenUsageDto,
  UpdateBotAgentDto,
  UpdateBotDto,
  UpdateBotKnowledgeDto,
  UpdateClientDto,
  UpdateFirstLineDto,
  UpdateGptIntegrationProfile,
  UpdateKnowledgeGroupDto,
  UpdateUserDto,
  UserControllerFindAllParams,
  UserEntity,
  UserEntityWithoutSecrets,
  UsersResponseDto,
  YandexGPTProfileEntity,
} from '../services/helpfy/helpfy.schemas'

export const getHelpfyAPIDocumentation = () => {
  /**
   * Validates the provided credentials and stores the user in the session if successful. Returns 400 if credentials are invalid
   * @summary Authenticate a user by email and password
   */
  const authControllerLogin = <TData = AxiosResponse<UserEntityWithoutSecrets>>(
    loginDto: LoginDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/auth/login`,
      loginDto,
      options
    )
  }

  /**
   * Validates the provided master credentials (email and api_key). Returns 400 if invalid. If successful, sets up a master session
   * @summary Authenticate as master via API key
   */
  const authControllerMasterLogin = <TData = AxiosResponse<boolean>>(
    masterLoginDto: MasterLoginDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/auth/master-login`,
      masterLoginDto,
      options
    )
  }

  /**
   * Verifies the user session and returns the user entity if logged in
   * @summary Check if the current user session is valid
   */
  const authControllerCheckSession = <
    TData = AxiosResponse<UserEntityWithoutSecrets>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/auth/check-session`,
      options
    )
  }

  /**
   * Verifies if the current session is master-level. Returns true if it is
   * @summary Check if the current session belongs to the master user
   */
  const authControllerCheckMasterSession = <TData = AxiosResponse<boolean>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/auth/check-master-session`,
      options
    )
  }

  /**
   * Destroys the server-side session and clears the session cookie, effectively logging the user out
   * @summary Log out the current user
   */
  const authControllerLogout = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/auth/logout`,
      undefined,
      options
    )
  }

  /**
   * Queues up a new completion request for the specified bot. Returns a ticket_id for tracking. Throws 404 if the bot is not found, 403 if user lacks permission
   * @summary Create a new completion (asynchronous request)
   */
  const botControllerCreateCompletion = <
    TData = AxiosResponse<ResponseBotCompletionDto>
  >(
    id: string,
    createBotCompletionDto: CreateBotCompletionDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/bots/${id}/completion`,
      createBotCompletionDto,
      options
    )
  }

  /**
   * Retrieves the current status or result of the queued completion request, identified by ticketId. Throws 404 if either the bot or completion log is not found, or 403 if user lacks permission
   * @summary Get the status of an asynchronous completion request
   */
  const botControllerGetCompletionStatus = <
    TData = AxiosResponse<ResponseCompletionStatusAsyncDto>
  >(
    id: string,
    ticketId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/bots/${id}/completion/${ticketId}`,
      options
    )
  }

  /**
   * Creates a new bot associated with the current user
   * @summary Create a new bot
   */
  const botControllerCreate = <TData = AxiosResponse<BotEntity>>(
    createBotDto: CreateBotDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/bots`,
      createBotDto,
      options
    )
  }

  /**
   * Returns a paginated list of bots belonging to the current user. Accepts optional query parameters for pagination
   * @summary Retrieve a list of bots for the current user
   */
  const botControllerFindAll = <TData = AxiosResponse<BotsResponseDto>>(
    params?: BotControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/bots`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * Returns the specified bot if it belongs to the current user. Throws 404 if not found, 403 if access is denied
   * @summary Retrieve a single bot by id
   */
  const botControllerFindOne = <TData = AxiosResponse<BotEntity>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/bots/${id}`, options)
  }

  /**
   * Updates the specified bot. Throws 404 if not found, 403 if the user does not have permission
   * @summary Update an existing bot
   */
  const botControllerUpdate = <TData = AxiosResponse<BotEntity>>(
    id: string,
    updateBotDto: UpdateBotDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/bots/${id}`,
      updateBotDto,
      options
    )
  }

  /**
   * Removes the specified bot. Throws 404 if not found, 403 if the user lacks permission
   * @summary Delete a bot by id
   */
  const botControllerRemove = <TData = AxiosResponse<BotEntity>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(`https://sharkov.helpfy.ai/api/v1/bots/${id}`, options)
  }

  /**
   * Returns a static list of all GPT models recognized by the system, along with their supported versions
   * @summary Retrieve all available GPT models and versions
   */
  const botControllerGetAllGptModelsAndTheirVersions = <
    TData = AxiosResponse<GPTModelVersionsDto>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/bots/models/all`,
      options
    )
  }

  /**
   * Lists all available versions for the specified GPT model. Throws 400 if the model is invalid
   * @summary Retrieve version details for a specific GPT model
   */
  const botControllerGetGptModelVersions = <
    TData = AxiosResponse<LLMVersionDtoClass[]>
  >(
    model: 'gigachat' | 'yandexgpt',
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/bots/models/${model}/versions`,
      options
    )
  }

  /**
   * Creates a new knowledge group for a given bot. If the bot does not exist, a 404 Not Found error is returned
   * @summary Create a new knowledge group
   */
  const knowledgeGroupControllerCreate = <
    TData = AxiosResponse<KnowledgeGroupEntity>
  >(
    createKnowledgeGroupDto: CreateKnowledgeGroupDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/knowledge-groups`,
      createKnowledgeGroupDto,
      options
    )
  }

  /**
   * Returns a paginated list of all knowledge groups belonging to the specified bot, including a document count for each group
   * @summary Retrieve all knowledge groups of a bot
   */
  const knowledgeGroupControllerFindAll = <
    TData = AxiosResponse<KnowledgeGroupResponseDto>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/knowledge-groups`,
      options
    )
  }

  /**
   * Returns the knowledge group with its document count. Throws 404 if the group does not exist
   * @summary Get a single knowledge group by its id
   */
  const knowledgeGroupControllerFindOne = <
    TData = AxiosResponse<KnowledgeGroupEntityWithDocumentsCount>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/knowledge-groups/${id}`,
      options
    )
  }

  /**
   * Updates the name (or other fields) of a knowledge group. Throws 404 if the group does not exist. Throws 400 if the group is default (and cannot be updated if your logic disallows it)
   * @summary Update a knowledge group by its id
   */
  const knowledgeGroupControllerUpdate = <
    TData = AxiosResponse<KnowledgeGroupEntity>
  >(
    id: string,
    updateKnowledgeGroupDto: UpdateKnowledgeGroupDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/knowledge-groups/${id}`,
      updateKnowledgeGroupDto,
      options
    )
  }

  /**
   * Deletes the specified knowledge group from the database. If the group is default, a 400 error is thrown. If the group is not found, a 404 error is thrown
   * @summary Remove a knowledge group by its id
   */
  const knowledgeGroupControllerRemove = <
    TData = AxiosResponse<KnowledgeGroupEntity>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/knowledge-groups/${id}`,
      options
    )
  }

  /**
   * Creates a new bot agent for the specified bot. If the bot does not exist, a 404 error is returned. If the user does not have access to that bot, a 403 error is returned
   * @summary Create a new bot agent
   */
  const botAgentControllerCreate = <TData = AxiosResponse<BotAgentEntity>>(
    createBotAgentDto: CreateBotAgentDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/bot-agents`,
      createBotAgentDto,
      options
    )
  }

  /**
   * Returns an array of bot agents filtered by the provided bot id. If the bot does not exist, a 404 error is returned. If the user does not have access to that bot, a 403 error is returned
   * @summary Retrieve all bot agents for a given bot
   */
  const botAgentControllerFindAll = <
    TData = AxiosResponse<BotAgentsResponseDto>
  >(
    params: BotAgentControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/bot-agents`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * Returns the specified bot agent if it exists and the user has permission to access the bot. Throws 404 if not found, 403 if forbidden
   * @summary Retrieve a single bot agent by id
   */
  const botAgentControllerFindOne = <TData = AxiosResponse<BotAgentEntity>>(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/bot-agents/${id}`,
      options
    )
  }

  /**
   * Updates the specified bot agent. Throws 404 if the agent does not exist, 403 if the user does not have the rights to modify it.
   * @summary Update a bot agent by id
   */
  const botAgentControllerUpdate = <TData = AxiosResponse<BotAgentEntity>>(
    id: number,
    updateBotAgentDto: UpdateBotAgentDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/bot-agents/${id}`,
      updateBotAgentDto,
      options
    )
  }

  /**
   * Deletes the specified bot agent. Throws 404 if the agent does not exist, 403 if the user does not have the rights to delete it, or if the agent is default or the last remaining one
   * @summary Delete a bot agent by id
   */
  const botAgentControllerRemove = <TData = AxiosResponse<BotAgentEntity>>(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/bot-agents/${id}`,
      options
    )
  }

  /**
   * @summary Paginated list of knowledge records
   */
  const knowledgeControllerFindAll = <
    TData = AxiosResponse<KnowledgesResponseDto>
  >(
    params?: KnowledgeControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/knowledges`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * @summary Create a knowledge record
   */
  const knowledgeControllerCreate = <
    TData = AxiosResponse<CreateBotKnowledgeResponseDto>
  >(
    createBotKnowledgeDto: CreateBotKnowledgeDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/knowledges`,
      createBotKnowledgeDto,
      options
    )
  }

  /**
   * @summary Get knowledge by id
   */
  const knowledgeControllerFindOneById = <
    TData = AxiosResponse<KnowledgesResponseDto>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/knowledges/${id}`,
      options
    )
  }

  /**
   * @summary Update knowledge by id
   */
  const knowledgeControllerUpdate = <TData = AxiosResponse<KnowledgeEntity[]>>(
    id: string,
    updateBotKnowledgeDto: UpdateBotKnowledgeDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/knowledges/${id}`,
      updateBotKnowledgeDto,
      options
    )
  }

  /**
   * @summary Delete knowledge by id
   */
  const knowledgeControllerRemove = <TData = AxiosResponse<KnowledgeEntity[]>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/knowledges/${id}`,
      options
    )
  }

  /**
   * Creates a new user record in the system. Depending on the logic, a 403 or 409 might be thrown if there are permission or duplication issues
   * @summary Create a new user
   */
  const userControllerCreate = <TData = AxiosResponse<UserEntity>>(
    createUserDto: CreateUserDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/users`,
      createUserDto,
      options
    )
  }

  /**
   * Returns a paginated list of users, optionally filtered by email or name
   * @summary Retrieve a list of users
   */
  const userControllerFindAll = <TData = AxiosResponse<UsersResponseDto>>(
    params?: UserControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/users`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * Retrieves a user by its unique id. Throws 404 if the user is not found
   * @summary Get a single user by id
   */
  const userControllerFindOne = <
    TData = AxiosResponse<UserEntityWithoutSecrets>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/users/${id}`, options)
  }

  /**
   * Updates an existing user. Throws 404 if the user is not found. Throws 403 if the user does not have permission to update this record
   * @summary Update user by id
   */
  const userControllerUpdate = <TData = AxiosResponse<UserEntity>>(
    id: string,
    updateUserDto: UpdateUserDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/users/${id}`,
      updateUserDto,
      options
    )
  }

  /**
   * Deletes the specified user. Throws 404 if the user is not found, 403 if access is denied
   * @summary Delete user by id
   */
  const userControllerRemove = <
    TData = AxiosResponse<UserEntityWithoutSecrets>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(`https://sharkov.helpfy.ai/api/v1/users/${id}`, options)
  }

  /**
   * Resets and returns a newly generated API key for the specified user. Throws 404 if the user is not found, 403 if access is denied
   * @summary Reset the API key of a user
   */
  const userControllerResetApiKey = <
    TData = AxiosResponse<ResetApiKeyResponseDto>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/users/reset-api-key/${id}`,
      options
    )
  }

  /**
   * Creates a new client record in the system. Throws 403 if the current user does not have permission to create clients
   * @summary Create a new client
   */
  const clientControllerCreate = <TData = AxiosResponse<ClientEntity>>(
    createClientDto: CreateClientDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/clients`,
      createClientDto,
      options
    )
  }

  /**
   * Returns a paginated list of clients, optionally filtered by name
   * @summary Retrieve a list of clients
   */
  const clientControllerFindAll = <TData = AxiosResponse<ClientsResponseDto>>(
    params?: ClientControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/clients`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * Returns the specified client record. Throws 404 if the client is not found, 403 if the user lacks permission to view it
   * @summary Retrieve a single client by id
   */
  const clientControllerFindOne = <TData = AxiosResponse<ClientEntity>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/clients/${id}`, options)
  }

  /**
   * Updates the specified client. Throws 404 if the client is not found, 403 if the user lacks permission to update it
   * @summary Update a client by id
   */
  const clientControllerUpdate = <TData = AxiosResponse<ClientEntity>>(
    id: string,
    updateClientDto: UpdateClientDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/clients/${id}`,
      updateClientDto,
      options
    )
  }

  /**
   * Removes the specified client record from the system. Throws 404 if not found, 403 if access is denied
   * @summary Delete a client by id
   */
  const clientControllerRemove = <TData = AxiosResponse<ClientEntity>>(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/clients/${id}`,
      options
    )
  }

  /**
   * Returns a paginated list of first line questions created by the current user, optionally filtered by bot id, status, or search string
   * @summary Retrieve a list of first line questions
   */
  const firstLineControllerFindAll = <
    TData = AxiosResponse<FirstLinesResponseDto>
  >(
    params?: FirstLineControllerFindAllParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/api/v1/first-lines`, {
      ...options,
      params: { ...params, ...options?.params },
    })
  }

  /**
   * Creates a new first line question record linked to the current user and the specified bot
   * @summary Create a new first line question
   */
  const firstLineControllerCreate = <TData = AxiosResponse<FirstLineEntity>>(
    createFirstLineDto: CreateFirstLineDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/first-lines`,
      createFirstLineDto,
      options
    )
  }

  /**
   * Returns the specified first line question if it belongs to the current user
   * @summary Retrieve a single first line question by id
   */
  const firstLineControllerFindOne = <TData = AxiosResponse<FirstLineEntity>>(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/first-lines/${id}`,
      options
    )
  }

  /**
   * Updates the specified question with new data if it belongs to the current user
   * @summary Update a first line question by id
   */
  const firstLineControllerUpdate = <TData = AxiosResponse<FirstLineEntity>>(
    id: number,
    updateFirstLineDto: UpdateFirstLineDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/first-lines/${id}`,
      updateFirstLineDto,
      options
    )
  }

  /**
   * Removes the specified question from the database if it belongs to the current user
   * @summary Delete a first line question by id
   */
  const firstLineControllerRemove = <TData = AxiosResponse<FirstLineEntity>>(
    id: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/first-lines/${id}`,
      options
    )
  }

  /**
   * Finds the full history of entries in the database about bot requests
   * @summary Find all the information for queries based on the parameters
   */
  const completionLogControllerFindAllForJournal = <
    TData = AxiosResponse<CompletionLogsResponseDto>
  >(
    params?: CompletionLogControllerFindAllForJournalParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-log/journal`,
      {
        ...options,
        params: { ...params, ...options?.params },
      }
    )
  }

  /**
   * Finds the specified number of recent messages of correspondence with the bot
   * @summary Find the latest N messages from the bot
   */
  const completionLogControllerGetLastMessages = <
    TData = AxiosResponse<LastMessagesResponse>
  >(
    botId: string,
    params: CompletionLogControllerGetLastMessagesParams,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-log/history/${botId}`,
      {
        ...options,
        params: { ...params, ...options?.params },
      }
    )
  }

  const completionTokenUsageControllerCompletionFindAll = <
    TData = AxiosResponse<CompletionTokenUsageResponseDto>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-token-usage/completion/all`,
      options
    )
  }

  const completionTokenUsageControllerCompletionGetUserTotalTokens = <
    TData = AxiosResponse<TotalCompletionTokenUsageDto>
  >(
    userId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-token-usage/completion/user/${userId}/total`,
      options
    )
  }

  const completionTokenUsageControllerCompletionGetBotTotalTokens = <
    TData = AxiosResponse<TotalCompletionTokenUsageDto>
  >(
    botId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-token-usage/completion/bot/${botId}`,
      options
    )
  }

  const completionTokenUsageControllerCompletionGetClientTotalTokens = <
    TData = AxiosResponse<TotalCompletionTokenUsageDto>
  >(
    clientId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/completion-token-usage/completion/client/${clientId}/total`,
      options
    )
  }

  const embeddingTokenUsageControllerEmbeddingFindAll = <
    TData = AxiosResponse<EmbeddingTokenUsagesResponseDto>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/embedding-token-usage/embedding/all`,
      options
    )
  }

  const embeddingTokenUsageControllerEmbeddingGetUserTotalTokens = <
    TData = AxiosResponse<TotalEmbeddingTokenUsageDto>
  >(
    userId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/embedding-token-usage/embedding/user/${userId}/total`,
      options
    )
  }

  const embeddingTokenUsageControllerEmbeddingGetBotTotalTokens = <
    TData = AxiosResponse<TotalEmbeddingTokenUsageDto>
  >(
    botId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/embedding-token-usage/embedding/bot/${botId}`,
      options
    )
  }

  const embeddingTokenUsageControllerEmbeddingGetClientTotalTokens = <
    TData = AxiosResponse<TotalEmbeddingTokenUsageDto>
  >(
    clientId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/embedding-token-usage/embedding/client/${clientId}/total`,
      options
    )
  }

  /**
   * Finds the full history of entries in the database about embedding requests
   * @summary Find all the information for queries based on the parameters
   */
  const embeddingLogControllerFindAllForJournal = <
    TData = AxiosResponse<EmbeddingLogsResponseDto>
  >(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/embedding-log/journal`,
      options
    )
  }

  /**
   * Creates a new profile for the user for new integrations with all models
   * @summary Create new user integration profile
   */
  const gptIntegrationProfileControllerCreate = <
    TData = AxiosResponse<GptIntegrationProfileEntity>
  >(
    createGptIntegrationProfile: CreateGptIntegrationProfile,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles`,
      createGptIntegrationProfile,
      options
    )
  }

  /**
   * Deletes an existing integration profile by id
   * @summary Delete an existing integration profile
   */
  const gptIntegrationProfileControllerRemove = <
    TData = AxiosResponse<GptIntegrationProfileEntity>
  >(
    profileId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.delete(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${profileId}`,
      options
    )
  }

  /**
   * Updates an existing integration profile by id
   * @summary Update an existing integration profile
   */
  const gptIntegrationProfileControllerUpdate = <
    TData = AxiosResponse<GptIntegrationProfileEntity>
  >(
    profileId: number,
    updateGptIntegrationProfile: UpdateGptIntegrationProfile,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${profileId}`,
      updateGptIntegrationProfile,
      options
    )
  }

  /**
   * Establishes a new connection with the transferred integration profile of the bot entity
   * @summary Setup a new active integration profile for the bot
   */
  const gptIntegrationProfileControllerSetBotIntegrationProfile = <
    TData = AxiosResponse<BotEntity>
  >(
    botId: number,
    profileId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${botId}/set-profile/${profileId}`,
      undefined,
      options
    )
  }

  /**
   * Searches for all records related to a specific user with integration profiles
   * @summary Get all existing user integration profiles
   */
  const gptIntegrationProfileControllerGetUserProfiles = <
    TData = AxiosResponse<GptIntegrationProfileEntity[]>
  >(
    userId: number,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${userId}/all`,
      options
    )
  }

  /**
   * Retrieves the existing YandexGPT integration credentials for the specified bot
   * @summary Get saved YandexGPT profile for bot
   */
  const gptIntegrationProfileControllerGetYandexGPTCredentials = <
    TData = AxiosResponse<YandexGPTProfileEntity>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${id}/yandexgpt-credentials`,
      options
    )
  }

  /**
   * Retrieves the existing GigaChat integration credentials for the specified bot
   * @summary Get saved GigaChat profile for bot
   */
  const gptIntegrationProfileControllerGetGigaChatCredentials = <
    TData = AxiosResponse<GigaChatProfileEntity>
  >(
    id: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${id}/gigachat-credentials`,
      options
    )
  }

  /**
   * Updates or creates GigaChat integration credentials for the specified bot
   * @summary Update GigaChat integration keys
   */
  const gptIntegrationProfileControllerUpdateGigaChatCredentials = <
    TData = AxiosResponse<GigaChatProfileEntity>
  >(
    profileId: string,
    createGigaChatIntegrationDto: CreateGigaChatIntegrationDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/gigachat-credentials/${profileId}`,
      createGigaChatIntegrationDto,
      options
    )
  }

  /**
   * Updates or creates YandexGPT integration credentials for the specified bot
   * @summary Update YandexGPT integration keys
   */
  const gptIntegrationProfileControllerUpdateYandexGPTCredentials = <
    TData = AxiosResponse<YandexGPTProfileEntity>
  >(
    profileId: string,
    createYandexGPTIntegrationDto: CreateYandexGPTIntegrationDto,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/yandexgpt-credentials/${profileId}`,
      createYandexGPTIntegrationDto,
      options
    )
  }

  /**
   * Tests the integration credentials for the specified bot and approves them if the test is successful
   * @summary Test integration and set is_approved=true if successful
   */
  const gptIntegrationProfileControllerTestIntegration = <
    TData = AxiosResponse<GptIntegrationProfileControllerTestIntegration200>
  >(
    id: string,
    model: 'gigachat' | 'yandexgpt',
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      `https://sharkov.helpfy.ai/api/v1/integration-profiles/${id}/test/${model}`,
      undefined,
      options
    )
  }

  const prometheusControllerIndex = <TData = AxiosResponse<void>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`https://sharkov.helpfy.ai/metrics`, options)
  }

  return {
    authControllerLogin,
    authControllerMasterLogin,
    authControllerCheckSession,
    authControllerCheckMasterSession,
    authControllerLogout,
    botControllerCreateCompletion,
    botControllerGetCompletionStatus,
    botControllerCreate,
    botControllerFindAll,
    botControllerFindOne,
    botControllerUpdate,
    botControllerRemove,
    botControllerGetAllGptModelsAndTheirVersions,
    botControllerGetGptModelVersions,
    knowledgeGroupControllerCreate,
    knowledgeGroupControllerFindAll,
    knowledgeGroupControllerFindOne,
    knowledgeGroupControllerUpdate,
    knowledgeGroupControllerRemove,
    botAgentControllerCreate,
    botAgentControllerFindAll,
    botAgentControllerFindOne,
    botAgentControllerUpdate,
    botAgentControllerRemove,
    knowledgeControllerFindAll,
    knowledgeControllerCreate,
    knowledgeControllerFindOneById,
    knowledgeControllerUpdate,
    knowledgeControllerRemove,
    userControllerCreate,
    userControllerFindAll,
    userControllerFindOne,
    userControllerUpdate,
    userControllerRemove,
    userControllerResetApiKey,
    clientControllerCreate,
    clientControllerFindAll,
    clientControllerFindOne,
    clientControllerUpdate,
    clientControllerRemove,
    firstLineControllerFindAll,
    firstLineControllerCreate,
    firstLineControllerFindOne,
    firstLineControllerUpdate,
    firstLineControllerRemove,
    completionLogControllerFindAllForJournal,
    completionLogControllerGetLastMessages,
    completionTokenUsageControllerCompletionFindAll,
    completionTokenUsageControllerCompletionGetUserTotalTokens,
    completionTokenUsageControllerCompletionGetBotTotalTokens,
    completionTokenUsageControllerCompletionGetClientTotalTokens,
    embeddingTokenUsageControllerEmbeddingFindAll,
    embeddingTokenUsageControllerEmbeddingGetUserTotalTokens,
    embeddingTokenUsageControllerEmbeddingGetBotTotalTokens,
    embeddingTokenUsageControllerEmbeddingGetClientTotalTokens,
    embeddingLogControllerFindAllForJournal,
    gptIntegrationProfileControllerCreate,
    gptIntegrationProfileControllerRemove,
    gptIntegrationProfileControllerUpdate,
    gptIntegrationProfileControllerSetBotIntegrationProfile,
    gptIntegrationProfileControllerGetUserProfiles,
    gptIntegrationProfileControllerGetYandexGPTCredentials,
    gptIntegrationProfileControllerGetGigaChatCredentials,
    gptIntegrationProfileControllerUpdateGigaChatCredentials,
    gptIntegrationProfileControllerUpdateYandexGPTCredentials,
    gptIntegrationProfileControllerTestIntegration,
    prometheusControllerIndex,
  }
}
export type AuthControllerLoginResult = AxiosResponse<UserEntityWithoutSecrets>
export type AuthControllerMasterLoginResult = AxiosResponse<boolean>
export type AuthControllerCheckSessionResult =
  AxiosResponse<UserEntityWithoutSecrets>
export type AuthControllerCheckMasterSessionResult = AxiosResponse<boolean>
export type AuthControllerLogoutResult = AxiosResponse<void>
export type BotControllerCreateCompletionResult =
  AxiosResponse<ResponseBotCompletionDto>
export type BotControllerGetCompletionStatusResult =
  AxiosResponse<ResponseCompletionStatusAsyncDto>
export type BotControllerCreateResult = AxiosResponse<BotEntity>
export type BotControllerFindAllResult = AxiosResponse<BotsResponseDto>
export type BotControllerFindOneResult = AxiosResponse<BotEntity>
export type BotControllerUpdateResult = AxiosResponse<BotEntity>
export type BotControllerRemoveResult = AxiosResponse<BotEntity>
export type BotControllerGetAllGptModelsAndTheirVersionsResult =
  AxiosResponse<GPTModelVersionsDto>
export type BotControllerGetGptModelVersionsResult = AxiosResponse<
  LLMVersionDtoClass[]
>
export type KnowledgeGroupControllerCreateResult =
  AxiosResponse<KnowledgeGroupEntity>
export type KnowledgeGroupControllerFindAllResult =
  AxiosResponse<KnowledgeGroupResponseDto>
export type KnowledgeGroupControllerFindOneResult =
  AxiosResponse<KnowledgeGroupEntityWithDocumentsCount>
export type KnowledgeGroupControllerUpdateResult =
  AxiosResponse<KnowledgeGroupEntity>
export type KnowledgeGroupControllerRemoveResult =
  AxiosResponse<KnowledgeGroupEntity>
export type BotAgentControllerCreateResult = AxiosResponse<BotAgentEntity>
export type BotAgentControllerFindAllResult =
  AxiosResponse<BotAgentsResponseDto>
export type BotAgentControllerFindOneResult = AxiosResponse<BotAgentEntity>
export type BotAgentControllerUpdateResult = AxiosResponse<BotAgentEntity>
export type BotAgentControllerRemoveResult = AxiosResponse<BotAgentEntity>
export type KnowledgeControllerFindAllResult =
  AxiosResponse<KnowledgesResponseDto>
export type KnowledgeControllerCreateResult =
  AxiosResponse<CreateBotKnowledgeResponseDto>
export type KnowledgeControllerFindOneByIdResult =
  AxiosResponse<KnowledgesResponseDto>
export type KnowledgeControllerUpdateResult = AxiosResponse<KnowledgeEntity[]>
export type KnowledgeControllerRemoveResult = AxiosResponse<KnowledgeEntity[]>
export type UserControllerCreateResult = AxiosResponse<UserEntity>
export type UserControllerFindAllResult = AxiosResponse<UsersResponseDto>
export type UserControllerFindOneResult =
  AxiosResponse<UserEntityWithoutSecrets>
export type UserControllerUpdateResult = AxiosResponse<UserEntity>
export type UserControllerRemoveResult = AxiosResponse<UserEntityWithoutSecrets>
export type UserControllerResetApiKeyResult =
  AxiosResponse<ResetApiKeyResponseDto>
export type ClientControllerCreateResult = AxiosResponse<ClientEntity>
export type ClientControllerFindAllResult = AxiosResponse<ClientsResponseDto>
export type ClientControllerFindOneResult = AxiosResponse<ClientEntity>
export type ClientControllerUpdateResult = AxiosResponse<ClientEntity>
export type ClientControllerRemoveResult = AxiosResponse<ClientEntity>
export type FirstLineControllerFindAllResult =
  AxiosResponse<FirstLinesResponseDto>
export type FirstLineControllerCreateResult = AxiosResponse<FirstLineEntity>
export type FirstLineControllerFindOneResult = AxiosResponse<FirstLineEntity>
export type FirstLineControllerUpdateResult = AxiosResponse<FirstLineEntity>
export type FirstLineControllerRemoveResult = AxiosResponse<FirstLineEntity>
export type CompletionLogControllerFindAllForJournalResult =
  AxiosResponse<CompletionLogsResponseDto>
export type CompletionLogControllerGetLastMessagesResult =
  AxiosResponse<LastMessagesResponse>
export type CompletionTokenUsageControllerCompletionFindAllResult =
  AxiosResponse<CompletionTokenUsageResponseDto>
export type CompletionTokenUsageControllerCompletionGetUserTotalTokensResult =
  AxiosResponse<TotalCompletionTokenUsageDto>
export type CompletionTokenUsageControllerCompletionGetBotTotalTokensResult =
  AxiosResponse<TotalCompletionTokenUsageDto>
export type CompletionTokenUsageControllerCompletionGetClientTotalTokensResult =
  AxiosResponse<TotalCompletionTokenUsageDto>
export type EmbeddingTokenUsageControllerEmbeddingFindAllResult =
  AxiosResponse<EmbeddingTokenUsagesResponseDto>
export type EmbeddingTokenUsageControllerEmbeddingGetUserTotalTokensResult =
  AxiosResponse<TotalEmbeddingTokenUsageDto>
export type EmbeddingTokenUsageControllerEmbeddingGetBotTotalTokensResult =
  AxiosResponse<TotalEmbeddingTokenUsageDto>
export type EmbeddingTokenUsageControllerEmbeddingGetClientTotalTokensResult =
  AxiosResponse<TotalEmbeddingTokenUsageDto>
export type EmbeddingLogControllerFindAllForJournalResult =
  AxiosResponse<EmbeddingLogsResponseDto>
export type GptIntegrationProfileControllerCreateResult =
  AxiosResponse<GptIntegrationProfileEntity>
export type GptIntegrationProfileControllerRemoveResult =
  AxiosResponse<GptIntegrationProfileEntity>
export type GptIntegrationProfileControllerUpdateResult =
  AxiosResponse<GptIntegrationProfileEntity>
export type GptIntegrationProfileControllerSetBotIntegrationProfileResult =
  AxiosResponse<BotEntity>
export type GptIntegrationProfileControllerGetUserProfilesResult =
  AxiosResponse<GptIntegrationProfileEntity[]>
export type GptIntegrationProfileControllerGetYandexGPTCredentialsResult =
  AxiosResponse<YandexGPTProfileEntity>
export type GptIntegrationProfileControllerGetGigaChatCredentialsResult =
  AxiosResponse<GigaChatProfileEntity>
export type GptIntegrationProfileControllerUpdateGigaChatCredentialsResult =
  AxiosResponse<GigaChatProfileEntity>
export type GptIntegrationProfileControllerUpdateYandexGPTCredentialsResult =
  AxiosResponse<YandexGPTProfileEntity>
export type GptIntegrationProfileControllerTestIntegrationResult =
  AxiosResponse<GptIntegrationProfileControllerTestIntegration200>
export type PrometheusControllerIndexResult = AxiosResponse<void>
